[% header('Using Snowball') %]

<h2>Links to resources</h2>

<ul>
<li> <A HREF="../compiler/snowman.html">Snowball manual</A>
</ul>

<h2>Compiling Snowball</h2>

<p>
When you <a href="/download.html">download Snowball</a>,
it already contains a make file to allow you to build it, like so:
</p>

<PRE>
    make
</PRE>

<p>
You can confirm it's working with a simple test like so:
</p>

<PRE>
    echo "running" | ./stemwords -l en
</PRE>

<p>
which should output: <tt>run</tt>
</p>

<p>
There's no built in way to install snowball currently - you can either copy
the <tt>snowball</tt> binary to somewhere that's on your <tt>PATH</tt>
(e.g. on a typical Linux machine: <tt>sudo cp snowball /usr/local/bin</tt>)
or just run it from the source tree with <tt>./snowball</tt>).
</p>

<h2>Running Snowball</h2>

<p>
The snowball compiler has the following command line syntax,
</p>

<PRE>
[% snowball_help | html %]
</PRE>

<p>
For example,
</p>

<PRE>
    snowball danish.sbl -o q/danish
    snowball danish.sbl -syntax
    snowball danish.sbl -output q/danish -ep danish_
</PRE>

<p>
The first argument, &nbsp;<code>SOURCE_FILE</code>, is the name of the Snowball file to be compiled. Unless you specify a different programming language to
generate code for, the default is to generate ISO C which results in two output
files, a C source in &nbsp;<code>OUTPUT_BASE.c</code>&nbsp; and a corresponding header file in &nbsp;<code>OUTPUT_BASE.h</code>.  This is similar for other
programming languages, e.g. if option &nbsp;<code>-java</code>&nbsp; is
present, Java output is produced in &nbsp;<code>OUTPUT_BASE.java</code>.
</p>

<p>
Some options are only valid when generating code for particular programming
languages.  For example, the &nbsp;<code>-widechars</code>,
&nbsp;<code>-utf8</code>, &nbsp;<code>-eprefix</code>&nbsp; and
&nbsp;<code>-vprefix</code>&nbsp; options are specific to C and C++.
</p>

<h4>ISO C generation</h4>

<p>
In the absence of the &nbsp;<code>-eprefix</code>&nbsp; and &nbsp;<code>-vprefix</code>&nbsp; options, the list of
declared externals in the Snowball program, for example,
</p>

[% highlight("
    externals ( stem_1 stem_2 moderate )
") %]

<p>
gives rise to a header file containing,
</p>

[% highlight("
    extern struct SN_env * create_env(void);
    extern void close_env(struct SN_env * z);

    extern int moderate(struct SN_env * z);
    extern int stem_2(struct SN_env * z);
    extern int stem_1(struct SN_env * z);
", "c") %]

<p>
If &nbsp;<code>-eprefix</code>&nbsp; is used, its string, &nbsp;<code>S1</code>, is prefixed to each external
name, for example
</p>

<PRE>
    -eprefix Khotanese_
</PRE>

<p>
would give rise to the header file,
</p>

[% highlight("
    extern struct SN_env * Khotanese_create_env(void);
    extern void Khotanese_close_env(struct SN_env * z);

    extern int Khotanese_moderate(struct SN_env * z);
    extern int Khotanese_stem_2(struct SN_env * z);
    extern int Khotanese_stem_1(struct SN_env * z);
", "c") %]

<p>
If &nbsp;<code>-vprefix</code>&nbsp; is used, all Snowball strings, integers and booleans give
rise to a &nbsp;<code>#define</code>&nbsp; line in the header file. For example
</p>

<PRE>
    -eprefix Khotanese_ -vprefix Khotanese_variable
</PRE>

<p>
would give rise the header file,
</p>

[% highlight("
    extern struct SN_env * Khotanese_create_env(void);
    extern void Khotanese_close_env(struct SN_env * z);

    #define Khotanese_variable_ch (S[0])
    #define Khotanese_variable_Y_found (B[0])
    #define Khotanese_variable_p2 (I[1])
    #define Khotanese_variable_p1 (I[0])
    extern int Khotanese_stem(struct SN_env * z);
", "c") %]

<p>
The <code>-utf8</code> and <code>-widechars</code>&nbsp; options affects how
the generated C/C++ code expects strings to be represented - UTF-8 or
wide-character Unicode (stored using 2 bytes per codepoint), or if neither is
specified, one byte per codepoint using either ISO-8859-1 or another encoding.
</p>

<p>
For other programming languages, one of these three options is effectively
implicitly hard-coded (except wide-characters may be wider) - e.g. C#, Java,
Javascript and Python use wide characters; Ada, Go and Rust use UTF-8; Pascal
uses ISO-8859-1.  Since Snowball 2.0 it's possible with a little care to write
Snowball code that works regardless of how characters are represented.  See
section 12 of the <a href="/compiler/snowman.html">Snowball manual</a> for
more details.
</p>

<p>
The &nbsp;<code>-runtime</code>&nbsp;  option is used to prepend a path to any &nbsp;<code>#include</code>
lines in the generated code, and is useful when the runtime header files (i.e.
those files in the runtime directory in the standard distribution) are not
in the same location as the generated source files. It is used when
building the libstemmer library, and may be useful for other projects.
</p>

<!--
<h4>Java generation</h4>
<p>
To run Java, download the
<A HREF="../dist/libstemmer_java-[% version %].tar.gz">tarball</A>,
which will unpack into an
appropriate directory structure.
</p>
-->

<h4>Other options</h4>

<p>
If &nbsp;<code>-syntax</code>&nbsp; is used the other options are ignored, and the syntax tree
of the Snowball program is directed to &nbsp;<code>stdout</code>. This can be a handy way
of checking that you have got the bracketing right in the program you have
written.
</p>

<p>
Any number of &nbsp;<code>-include</code>&nbsp; options may be present, for example,
</p>

<PRE>
    snowball testfile -output test -ep danish_  \
             -include /home/martin/Snowball/codesets  \
             -include extras
</PRE>

<p>
Each &nbsp;<code>-include</code>&nbsp; is followed by a directory name. With a chain of
directories &nbsp;<code>D1</code>, &nbsp;<code>D2</code>&nbsp; ... &nbsp;<code>Dn</code>, a Snowball &nbsp;<code>get</code>&nbsp; directive,
</p>

[% highlight("
    get 'F'
") %]

<p>
causes &nbsp;<code>F</code>&nbsp; to be searched for in the successive locations,
</p>

<PRE>
    F
    D1/F
    D2/F
    ...
    Dn/F
</PRE>

<p>
&#x2014; that is, the current directory, followed in turn by directories &nbsp;<code>D1</code>&nbsp; to
<code>Dn</code>.
</p>

<h2>The Snowball API</h2>

<p>
To access Snowball from C, include the header &nbsp;<code>api.h</code>, and any headers
generated from the Snowball scripts you wish to use. &nbsp;<code>api.h</code>&nbsp; declares
</p>

[% highlight("
    struct SN_env { /* ... */ };
    extern void SN_set_current(struct SN_env * z, int size, char * s);
", "c") %]

<p>
Continuing the previous example, you set up an environment to call the
resources of the Khotanese module with
</p>

[% highlight("
    struct SN_env * z;
    z = Khotanese_create_env();
", "c") %]

<p>
Snowball has the concept of a &#8216;current string&#8217;.
This can be set up by,
</p>

[% highlight("
    SN_set_current(z, i, b);
", "c") %]

<p>
This defines the current string as the &nbsp;<code>i</code>&nbsp; bytes of data starting at
address &nbsp;<code>b</code>. The externals can then be called,
</p>

[% highlight("
    Khotanese_moderate(z);
    /* ... */
    Khotanese_stem_1(z);
", "c") %]

<p>
They give a 1 or 0 result, corresponding to the <B><I>t</I></B> or <B><I>f</I></B> result of
the Snowball routine.
</p>

<p>
And later,
</p>

[% highlight("
    Khotanese_close_env(z);
", "c") %]

<p>
To release the space raised by z back to the system. You can do this for a
number of Snowball modules at the same time: you will need a separate
<code>struct SN_env * z;</code>&nbsp; for each module.
</p>

<p>
The current string is given by the &nbsp;<code>z-&gt;l</code>&nbsp; bytes of data starting at &nbsp;<code>z-&gt;p</code>.
The string is not zero-terminated, but you can zero terminate it yourself with
</p>

[% highlight("
    z->p[z->l] = 0;
", "c") %]

<p>
(There is always room for this last zero byte.) For example,
</p>

[% highlight('
    SN_set_current(z, strlen(s), s);
    Khotanese_stem_1(z);
    z->p[z->l] = 0;
    printf("Khotanese-1' _ " stems '%s' to '%s'" _ '\n", s, z->p);
', "c") %]

<p>
The values of the other variables can be accessed via the &nbsp;<code>#define</code>
settings that result from the &nbsp;<code>-vprefix</code>&nbsp; option, although this should not
usually be necessary:
</p>

[% highlight('
    printf("p1 is %d\n", z->Khotanese_variable_p1);
', "c") %]

<p>
The stemming scripts on this Web site use Snowball very simply.
<code>-vprefix</code>&nbsp; is left unset, and &nbsp;<code>-eprefix</code>&nbsp; is set to the name of the
script (usually the language the script is for).
</p>

<!-- We should probably reinstate this section: <h2>Getting started</h2> -->

<h2>Debugging snowball scripts</h2>

<p>
In the rare event that your Snowball script does not run perfectly the first time:
</p>

<p>
Remember that the option &nbsp;<code>-syntax</code>&nbsp; prints out the syntax tree. A question
mark can be included in Snowball as a command, and it will generate a call
<code>debug(...)</code>. The defined &nbsp;<code>debug</code>&nbsp; in &nbsp;<code>runtime/utilities.c</code>&nbsp; (usually
commented out) can then be used. It causes the
current string to sent to &nbsp;<code>stdout</code>, with square brackets marking the
slice and vertical bar the position of <B><I>c</I></B>. Curly brackets mark the
end-limits of the string, which may be less than the whole string because
of the action of &nbsp;<code>setlimit</code>.
</p>

<p>
At present there is no way of reporting the value of an integer or boolean.
</p>

<p>
If desperate, you can put debugging lines into the generated C program.
You can pass <code>-comments</code> to the snowball compiler to get it to
generate comments showing the correspondence with the Snowball source which
makes it easier to find where to add such debugging code.
</p>

<h2>Compiler bugs</h2>

<p>
If you hit a snowball compiler bug, try to
capture it in a small script before notifying us.
</p>

<h2>Known problems in Snowball</h2>

<p>
The main one is that it is possible to &#8216;pull the rug from under your own feet&#8217; in
constructions like this:
</p>

[% highlight('
    [ do something ]
    do something_else
    ( C1 delete C2 ) or ( C3 )
') %]

<p>
Suppose &nbsp;<code>C1</code>&nbsp; gives <B><I>t</I></B>, the delete removes the slice established on the first
line, and &nbsp;<code>C2</code>&nbsp; gives <B><I>f</I></B>, so C3 is done with <B><I>c</I></B> set back to the value it had
before &nbsp;<code>C1</code>&nbsp; was obeyed &#x2014; but this old value does not take account of the byte shift
caused by the delete. This problem was foreseen from the beginning when designing
Snowball, and recognised as a minor issue because it is an unnatural thing to want to
do. (<code>C3</code>&nbsp; should not be an alternative to something which has deletion as an
occasional side-effect.) It may be addressed in the future.
</p>

[% footer %]
