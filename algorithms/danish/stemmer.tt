[% header('Danish stemming algorithm') %]
<h2>Links to resources</h2>

<ul>
<li> <a HREF="/algorithms/scandinavian.html">Scandinavian language stemmers</a>
[% algorithm_lis('danish', 'Danish') %]
</ul>

[% algorithm_vocab([40, 'indtage', 'underste']) %]

<h2>The stemming algorithm</h2>

<p>
The Danish alphabet includes the following additional letters,
</p>

<DL><DD>
    <B><I>æ  &nbsp;  å  &nbsp;  ø</I></B>
</DL>

<p>
The following letters are vowels:
</p>

<DL><DD>
    <B><I>a  &nbsp;  e  &nbsp;  i  &nbsp;  o  &nbsp;  u  &nbsp;  y  &nbsp;  æ  &nbsp;  å  &nbsp;  ø</I></B>
</DL>

<p>
A consonant is defined as a character from ASCII a-z which isn't a vowel
(originally this was "A consonant is defined as a non-vowel" but since
2018-11-15 we've changed this definition to avoid the stemmer altering
alphanumeric codes which end with a repeated digit).
</p>

<p>
<I>R</I>2 is not used: <I>R</I>1 is defined in the same way as in the
<A HREF="../german/stemmer.html">German stemmer</A>.
(See the <A HREF="../../texts/r1r2.html">note</A> on <I>R</I>1 and <I>R</I>2.)
</p>

<p>
Define a valid <B><I>s</I></B>-ending as one of
</p>

<DL><DD>
<B><I>a  &nbsp;  b  &nbsp;  c  &nbsp;  d  &nbsp;  f  &nbsp;  g  &nbsp;  h  &nbsp;  j  &nbsp;  k  &nbsp;  l  &nbsp;  m  &nbsp;  n  &nbsp;  o  &nbsp;  p  &nbsp;  r
 &nbsp;  t  &nbsp;  v  &nbsp;  y  &nbsp;  z  &nbsp;  å</I></B>
</DL>

<p>
Do each of steps 1, 2, 3 and 4.
</p>

<p>
Step 1:
</p>
<DL><DD>
    <p>
    Search for the longest among the following suffixes in <I>R</I>1, and
    perform the action indicated.
    </p>
    <DL>
        <DT>(<I>a</I>)
            <B><I>hed  &nbsp;  ethed  &nbsp;  ered  &nbsp;  e  &nbsp;  erede  &nbsp;  ende  &nbsp;  erende  &nbsp;  ene
             &nbsp;  erne  &nbsp;  ere  &nbsp;  en  &nbsp;  heden  &nbsp;  eren  &nbsp;  er  &nbsp;  heder  &nbsp;  erer
             &nbsp;  heds  &nbsp;  es  &nbsp;  endes  &nbsp;  erendes  &nbsp;  enes  &nbsp;  ernes  &nbsp;  eres  &nbsp;
            ens  &nbsp;  hedens  &nbsp;  erens  &nbsp;  ers  &nbsp;  ets  &nbsp;  erets  &nbsp;  et  &nbsp;  eret</I></B>
                <DD>delete
        <DT>(<I>b</I>)
            <B><I>s</I></B>
                <DD>delete if preceded by a valid <B><I>s</I></B>-ending
</DL>
<p>
    (Note that only the suffix needs to be in <I>R</I>1, the letter of the
    valid <B><I>s</I></B>-ending is not required to be.)
</p>
</DL>

<p>
Step 2:
</p>
<DL><DD>
    <p>
    Search for one of the following suffixes in <I>R</I>1, and if found
    delete the last letter.
    </p>
    <DL><DD>
        <B><I>gd  &nbsp;  dt  &nbsp;  gt  &nbsp;  kt</I></B>
    </DL>
    (For example, <I>friskt</I> &#x2192; <I>frisk</I>)
</DL>

Step 3:
<DL><DD>
    <p>
    If the word ends <B><I>igst</I></B>, remove the final <B><I>st</I></B>.
    </p>

    <p>
    Search for the longest among the following suffixes in <I>R</I>1, and
    perform the action indicated.
    </p>
<DL>
    <DT>(<I>a</I>)
    <B><I>ig  &nbsp;  lig  &nbsp;  elig  &nbsp;  els</I></B>
        <DD>delete, and then repeat step 2
    <DT>(<I>b</I>)
    <B><I>løst</I></B>
        <DD>replace with <B><I>løs</I></B>
</DL>
</DL>

Step 4: undouble
<DL><DD>
    <p>
    If the word ends with double consonant in <I>R</I>1, remove one of the
    consonants.
    </p>

    <p>
    (For example, <I>bestemmelse</I> &#x2192; <I>bestemmels</I> (step 1)
    &#x2192; <I>bestemm</I> (step 3<I>a</I>)
    &#x2192; <I>bestem</I> in this step.)
    </p>
</DL>

<h2>The same algorithm in Snowball</h2>

[% highlight_file('danish') %]

[% footer %]
