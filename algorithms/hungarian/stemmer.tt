[% header('Hungarian stemming algorithm') %]

<h2>Links to resources</h2>

<ul>
[% algorithm_lis('hungarian', 'Hungarian', 'https://en.wikipedia.org/wiki/Hungarian_language') %]
<li> <a href="https://staff.fnwi.uva.nl/m.derijke/Publications/Files/clef2005-proc-adhoc.pdf">
A. Tordai and M. de Rijke.  Four Stemmers and a Funeral: Stemming in Hungarian at CLEF 2005</a>
</ul>

[% algorithm_vocab([40, 'babaháznak', 'muattta']) %]

<h2>Design Notes</h2>

<p>
The algorithm is described in the paper as "Light".  It primarily aims to
remove noun inflections (<i>"all noun cases, plural and frequent owners"</i>).
This means it also stems adjectives (<i>"the two are linked because of similar
morphology"</i>).  Some verb forms are stemmed, but really only as a side-effect
when a rule to remove a noun suffix matches a verb form as well.  The paper
presents the case that stemming verbs matters less for retrieval.
</p>

<p>
The Hungrian language has these digraphs:
</p>

<DL><DD>
    <B><I>cs  &nbsp;  dz  &nbsp;  dzs  &nbsp;  gy  &nbsp;  ly  &nbsp;  ny  &nbsp;  sz  &nbsp;  ty  &nbsp;  zs</I></B>
</DL>

<p>
However treating these specially makes no difference to the results of the
algorithm on valid Hungarian words so (since Snowball 3.0.0) the algorithm
doesn't treat digraphs specially, except that some of the double constants
include digraphs: e.g. <b><i>ccs</i></b>.
</p>

<h2>Algorithm Description</h2>

<p>
This stemming algorithm removes the inflectional suffixes of nouns. Nouns are
inflected for case, person/possession and number.
</p>

<p>
Letters in Hungarian include the following accented forms,
</p>

<DL><DD>
    <B><I>&aacute;  &nbsp;  &eacute;  &nbsp;  &iacute;  &nbsp;  &oacute;  &nbsp;  &ouml;  &nbsp;  &odblac;  &nbsp;  &uacute;  &nbsp;  &uuml;  &nbsp;  &udblac;</I></B>
</DL>

<p>
The following letters are vowels:
</p>

<DL><DD>
    <B><I>a  &nbsp;  &aacute;  &nbsp;  e  &nbsp;  &eacute;  &nbsp;  i  &nbsp;  &iacute;  &nbsp;  o  &nbsp;  &oacute;  &nbsp;  &ouml;  &nbsp;  &odblac;  &nbsp;  u  &nbsp;  &uacute;  &nbsp;
    &uuml;  &nbsp;  &udblac;</I></B>
</DL>

<p>
For the purposes of this algorithm we define a consonant as a character which
is not a vowel.
</p>

<p>
A <I>double consonant</I> is defined as:
</p>

<DL><DD>
    <B><I>bb  &nbsp;  cc  &nbsp;  ccs  &nbsp;  dd  &nbsp;  ff  &nbsp;  gg  &nbsp;  ggy  &nbsp;  jj  &nbsp;  kk  &nbsp;  ll  &nbsp;  lly  &nbsp;  mm
     &nbsp;  nn  &nbsp;  nny  &nbsp;  pp  &nbsp;  rr  &nbsp;  ss  &nbsp;  ssz  &nbsp;  tt  &nbsp;  tty  &nbsp;  vv  &nbsp;  zz  &nbsp;  zzs</I></B>
</DL>

<p>
If the word begins with a vowel, <I>R</I>1 is defined as the region after the
first consonant in the word. If the word begins with a consonant, it
is defined as the region after the first vowel in the word. If the word does
not contain both a vowel and consonant, <I>R</I>1 is the null region at the end of
the word.
</p>

<p>
For example:
</p>

<PRE>
    t &oacute; b a n           consonant-vowel
       |.....|          R1 is 'a b a n'

    a b l a k a n       vowel-consonant
       |.........|      R1 is 'l a k a n'

    a c s o n y         vowel-digraph
         |.....|        R1 is 'o n y'

    c v s
     ---&gt;|&lt;---          null R1 region
</PRE>

<p>
&#8216;Delete if in <I>R</I>1&#8217; means that the suffix should be removed if it is in
region <I>R</I>1 but not if it is outside.
</p>

<p>
Do steps 1 to 9 in turn
</p>

<p>
Step 1: Remove instrumental case
</p>

<DL><DD>
    Search for one of the following suffixes and perform the action indicated.
<DL>
    <DT><B><I>al  &nbsp;  el</I></B>
    <DD>delete if in <I>R</I>1 and preceded by a double consonant, and
    remove one of the double consonants. (In the case of consonant plus digraph, such as <B><I>ccs</I></B>, remove a <B><I>c</I></B>).
</DL>
</DL>

<p>
Step 2: Remove frequent cases
</p>

<DL><DD>
    Search for the longest among the following suffixes and perform the action indicated.
<DL>
    <DT><B><I>ban  &nbsp;  ben  &nbsp;  ba  &nbsp;  be  &nbsp;  ra  &nbsp;  re  &nbsp;  nak  &nbsp;  nek  &nbsp;  val  &nbsp;  vel  &nbsp;  t&oacute;l
     &nbsp;  t&odblac;l  &nbsp;  r&oacute;l  &nbsp;  r&odblac;l  &nbsp;  b&oacute;l  &nbsp;  b&odblac;l  &nbsp;  hoz  &nbsp;  hez  &nbsp;  h&ouml;z  &nbsp;
    n&aacute;l  &nbsp;  n&eacute;l  &nbsp;  ig  &nbsp;  at  &nbsp;  et  &nbsp;  ot  &nbsp;  &ouml;t  &nbsp;  &eacute;rt  &nbsp;  k&eacute;pp  &nbsp;
    k&eacute;ppen  &nbsp;  kor  &nbsp;  ul  &nbsp;  &uuml;l  &nbsp;  v&aacute;  &nbsp;  v&eacute;  &nbsp;  onk&eacute;nt  &nbsp;  enk&eacute;nt  &nbsp;
    ank&eacute;nt  &nbsp;  k&eacute;nt  &nbsp;  en  &nbsp;  on  &nbsp;  an  &nbsp;  &ouml;n  &nbsp;  n  &nbsp;  t</I></B>


    <DD>delete if in <I>R</I>1
    <DD>if the remaining word ends <B><I>&aacute;</I></B> replace by <B><I>a</I></B>
    <DD>if the remaining word ends <B><I>&eacute;</I></B> replace by <B><I>e</I></B>
</DL>
</DL>

<p>
Step 3: Remove special cases:
</p>

<DL><DD>
    Search for the longest among the following suffixes and perform the action
    indicated.
<DL>
    <DT><B><I>&aacute;n  &nbsp;  &aacute;nk&eacute;nt</I></B>
    <DD>replace by <B><I>a</I></B> if in <I>R</I>1
    <DT><B><I>&eacute;n</I></B>
    <DD>replace by <B><I>e</I></B> if in <I>R</I>1
</DL>
</DL>

<p>
Step 4: Remove other cases:
</p>

<DL><DD>
    Search for the longest among the following suffixes and perform the action indicated
<DL>
    <DT><B><I>astul  &nbsp;  est&uuml;l  &nbsp;  stul  &nbsp;  st&uuml;l</I></B>
    <DD>delete if in <I>R</I>1
    <DT><B><I>&aacute;stul</I></B>
    <DD>replace with <B><I>a</I></B> if in <I>R</I>1
    <DT><B><I>&eacute;st&uuml;l</I></B>
    <DD>replace with <B><I>e</I></B> if in <I>R</I>1
</DL>
</DL>

<p>
Step 5: Remove factive case
</p>

<DL><DD>
    Search for one of the following suffixes and perform the action indicated.
<DL>
    <DT><B><I>&aacute;  &nbsp;  &eacute;</I></B>
    <DD>delete if in <I>R</I>1 and preceded by a double consonant, and
    remove one of the double consonants (as in step 1).
</DL>
</DL>

<p>
Step 6: Remove owned
</p>

<DL><DD>
    Search for the longest among the following suffixes and perform the action
    indicated.
<DL>
    <DT><B><I>ok&eacute;  &nbsp;  &ouml;k&eacute;  &nbsp;  ak&eacute;  &nbsp;  ek&eacute;  &nbsp;  k&eacute;  &nbsp;  &eacute;i  &nbsp;  &eacute;</I></B>
    <DD>delete if in <I>R</I>1
    <DT><B><I>&aacute;k&eacute;  &nbsp;  &aacute;&eacute;i</I></B>
    <DD>replace with <B><I>a</I></B> if in <I>R</I>1
    <DT><B><I>&eacute;k&eacute;  &nbsp;  &eacute;&eacute;i  &nbsp;  &eacute;&eacute;</I></B>
    <DD>replace with <B><I>e</I></B> if in <I>R</I>1
</DL>
</DL>

<p>
Step 7: Remove singular owner suffixes
</p>

<DL><DD>
    Search for the longest among the following suffixes and perform the action
    indicated.
<DL>
    <DT><B><I>&uuml;nk  &nbsp;  unk  &nbsp;  nk  &nbsp;  juk  &nbsp;  j&uuml;k  &nbsp;  uk  &nbsp;  &uuml;k  &nbsp;  em  &nbsp;  om  &nbsp;  am  &nbsp;  m
     &nbsp;  od  &nbsp;  ed  &nbsp;  ad  &nbsp;  &ouml;d  &nbsp;  d  &nbsp;  ja  &nbsp;  je  &nbsp;  a  &nbsp;  e o</I></B>
    <DD>delete if in <I>R</I>1
    <DT><B><I>&aacute;nk &aacute;juk &aacute;m &aacute;d &aacute;</I></B>
    <DD>replace with <B><I>a</I></B> if in <I>R</I>1
    <DT><B><I>&eacute;nk &eacute;j&uuml;k &eacute;m &eacute;d &eacute;</I></B>
    <DD>replace with <B><I>e</I></B> if in <I>R</I>1
</DL>
</DL>

<p>
Step 8: Remove plural owner suffixes
</p>

<DL><DD>
    Search for the longest among the following suffixes and perform the action
    indicated.
<DL>
    <DT><B><I>jaim  &nbsp;  jeim  &nbsp;  aim  &nbsp;  eim  &nbsp;  im  &nbsp;  jaid  &nbsp;  jeid  &nbsp;  aid  &nbsp;  eid  &nbsp;  id  &nbsp;
    jai  &nbsp;  jei  &nbsp;  ai  &nbsp;  ei  &nbsp;  i  &nbsp;  jaink  &nbsp;  jeink  &nbsp;  eink  &nbsp;  aink  &nbsp;  ink  &nbsp;
    jaitok  &nbsp;  jeitek  &nbsp;  aitok  &nbsp;  eitek  &nbsp;  itek  &nbsp;  jeik  &nbsp;  jaik  &nbsp;  aik  &nbsp;  eik  &nbsp;
    ik</I></B>

    <DD>delete if in <I>R</I>1
    <DT><B><I>&aacute;im  &nbsp;  &aacute;id  &nbsp;  &aacute;i  &nbsp;  &aacute;ink  &nbsp;  &aacute;itok  &nbsp;  &aacute;ik</I></B>
    <DD>replace with <B><I>a</I></B> if in <I>R</I>1
    <DT><B><I>&eacute;im  &nbsp;  &eacute;id  &nbsp;    &nbsp;  &eacute;i  &nbsp;  &eacute;ink  &nbsp;  &eacute;itek  &nbsp;   &eacute;ik</I></B>
    <DD>replace with <B><I>e</I></B> if in <I>R</I>1
</DL>
</DL>

<p>
Step 9: Remove plural suffixes
</p>

<DL><DD>
    Search for the longest among the following suffixes and perform the action
    indicated.
<DL>
    <DT><B><I>&aacute;k</I></B>
    <DD>replace with <B><I>a</I></B> if in <I>R</I>1
    <DT><B><I>&eacute;k</I></B>
    <DD>replace with <B><I>e</I></B> if in <I>R</I>1
    <DT><B><I>&ouml;k  &nbsp;  ok  &nbsp;  ek  &nbsp;  ak  &nbsp;  k</I></B>
    <DD>delete if in <I>R</I>1
</DL>
</DL>

<h2>History of functional changes to the algorithm</h2>

<ul>

<li>Sep 2006: Contributed by Anna Tordai, University of Amsterdam.  The
paper linked above describes evaluation of four variants of the algorithm, but
does not describe the details of the algorithm itself.  It seems the
contributed algorithm corresponds to <i>Light2</i> in the paper.

<li>Sep 2014: Fixed encoding problem: <b><i>õ</i></b> was being used instead of
<b><i>ő</i></b> and <b><i>û</i></b> instead of <b><i>ű</i></b>.

<li><p>Snowball 3.0.0: Removed special handling of digraphs.
We were ensuring <i>R</i>1 didn't start in the middle of a digraph (except that
"dz" was missing from the Snowball implementation although included in the
algorithm description).  However having R1 start in the middle of a digraph
would only make a difference to the stemming if we removed a suffix that
started with the last character of the digraph (or with "zs" in the case of
"dzs").</p>

<p>
No suffixes we remove start with <b><i>y</i></b> or <b><i>z</i></b>.
</p>

<p>
Two suffixes start with <b><i>s</i></b> (<b><i>stul</i></b> and
<b><i>stül</i></b>) so removing special handling of <b><i>cs</i></b> and
<b><i>dzs</i></b> makes a difference to some inputs but not to any inputs which
are valid Hungarian words.
</p>

<p>
Removing the digraph handling speeds up stemming (by ~2% on the current
sample vocabulary list).
</p>

</ul>

<h2>The full algorithm in Snowball</h2>

[% highlight_file('hungarian') %]

[% footer %]
