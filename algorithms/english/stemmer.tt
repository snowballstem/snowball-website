[% header('The English (Porter2) stemming algorithm') %]

<h2>Links to resources</h2>

<ul>
[% algorithm_lis('english', 'English') %]
</ul>

[% algorithm_vocab([40, 'consign', 'knack']) %]

<h2>Developing the English stemmer</h2>

<p>
(Revised slightly, December 2001)<BR>
(Further revised, September 2002)
</p>

<p>
Martin Porter made more than one attempt to improve the structure of the Porter
algorithm by making it follow the pattern of ending removal of the Romance
language stemmers. It is not hard to see why one should want to do this:
step 1<I>b</I> of the Porter stemmer removes <B><I>ed</I></B> and <B><I>ing</I></B>, which are
<I>i</I>-suffixes <A HREF="../../texts/glossary.html">(*)</A> attached to verbs. If these suffixes are removed, there
should be no need to remove <I>d</I>-suffixes which are not verbal, although
it will try to do so. This seems to be a deficiency in the Porter stemmer,
not shared by the Romance stemmers. Again, the divisions between steps
2, 3 and 4 seem rather arbitrary, and are not found in the Romance stemmers.
</p>

<p>
Nevertheless, these attempts at improvement were abandoned. They seem
to lead to a more complicated algorithm with no very obvious improvements.
A reason for not taking note of the outcome of step 1<I>b</I> may be that
English endings do not determine word categories quite as strongly as
endings in the Romance languages. For example, <I>condition</I> and
<I>position</I> in French have to be nouns, but in English they can be verbs
as well as nouns,
<DL><DD>
    We are all conditioned by advertising<BR>
    They are positioning themselves differently today
</DL>
A possible reason for having separate steps 2, 3 and 4 is that
<I>d</I>-suffix combinations in English are quite complex, a point which has
been made
<A HREF="/algorithms/">elsewhere</A>.
</p>

<p>
But it is hardly surprising that after twenty years of use of the Porter
stemmer, certain improvements did suggest themselves, and a new algorithm
for English is therefore offered here. (It could be called the &#8216;Porter2&#8217;
stemmer to distinguish it from the Porter stemmer, from which it derives.)
The changes are not so very extensive:
</p>

<ol>
<li>[In C Porter stemmer but not in paper]
Extra rule in Step 2: <b><i>logi</i></b> -> <b><i>log</i></b>
<li>[In C Porter stemmer but not in paper]
Step 2 rule: <b><i>abli</i></b> -> <b><i>able</i></b> replace by <b><i>bli</i></b> -> <b><i>ble</i></b>
<li>[In C Porter stemmer but not in paper]
The algorithm leaves alone strings of length 2 (so
<b><i>as</i></b> and <b><i>is</i></b> not longer lose <b><i>s</i></b>.
<li>Terminating <B><I>y</I></B> is changed to <B><I>i</I></B> rather less often
<li>Suffix <B><I>us</I></B> does not lose its <B><I>s</I></B>
<li>A few additional suffixes are included for removal, including suffix
<B><I>ly</I></B>
<li>A small list of exceptional forms is included
<li>[December 2001] Steps 5<I>a</I> and 5<I>b</I>
of the old Porter stemmer were combined into a single step. This means
that undoubling final <B><I>ll</I></B> is not done with removal of final <B><I>e</I></B>
<li>[December 2001] In Step 3 <B><I>ative</I></B> is removed only when in region <I>R</I>2.
<li>[September 2002] Exception added to prevent <b><i>herring</i></b> from stemming to <b><i>her</i></b>.
<li>[May 2005] <B><I>commun</I></B> added to exceptional forms
<li>[July 2005] A small adjustment was made (including a new step 0) to handle
apostrophe.
<li>[January 2006] "Words" <b><i>ied</i></b> and <b><i>ies</i></b> now stem to <b><i>ie</i></b> rather than <b><i>i</i></b>.
<li>[January 2006] The implementation was fixed to follow the algorithm as documented here and now always treats an initial <b><i>y</i></b> as a consonant.
<li>[November 2006] <B><I>arsen</I></B> added to exceptional forms
<li>Snowball 3.0.0 Don't undouble if preceded by exactly <b><i>a</i></b>, <b><i>e</i></b> or <b><i>o</i></b>
<li>Snowball 3.0.0 Exception added to prevent <b><i>evening</i></b> from stemming to <b><i>even</i></b>.
<li>Snowball 3.0.0 Removed exception for <b><i>skis</i></b> as the algorithm gives the same stem without it!
<li>Snowball 3.0.0 Avoid conflating <b><i>past</i></b> with <b><i>paste</i></b>/<b><i>pastes</i></b>/<b><i>pasted</i></b>/<b><i>pasting</i></b>.
<li>Snowball 3.0.0 Avoid conflating <b><i>universe</i></b>/<b><i>universes</i></b> with <b><i>universal</i></b>/<b><i>universally</i></b> and <b><i>university</i></b>/<b><i>universities</i></b>.
<li>Snowball 3.0.0 Avoid conflating <b><i>lateral</i></b>/<b><i>laterally</i></b> with <b><i>later</i></b>.
<li>Snowball 3.0.0 Replace <b><i>-ogist</i></b> with <b><i>-og</i></b> to conflate <b><i>geologist</i></b> with <b><i>geology</i></b>, etc.
<li>Snowball 3.0.0 Handle <b><i>-eed</i></b> and <b><i>-ing</i></b> exceptions in respective rules.
<li>Snowball 3.1.0 Restored exception for <b><i>skis</i></b> which <b>b</b> is needed.
</ol>

<h2>Design Notes</h2>

<p>
Most comparatives (<b><i>-er</i></b>) are not handled.  There is a
rule to remove <b><i>-er</i></b> in <i>R</i>2 (intended mostly for
other forms with that ending rather than comparatives - e.g.
<i>flatterer</i>, <i>observer</i>, <i>publisher</i>) which means longer
comparatives are handled (e.g. <i>cleverer</i>, <i>yellower</i>) but most
longer adjectives form the comparative with <i>more</i> e.g. <i>more
attractive</i> rather than <i>attractiver</i>).  Extending this rule
to check <i>R</i>1 as well would affect too many words where removal would
be problematic - for example <i>charter</i>, <i>master</i>, <i>meter</i>,
<i>number</i>, <i>mother</i>, <i>offer</i>, <i>proper</i>, <i>sober</i>,
<i>solder</i>, <i>temper</i>, <i>wither</i>.  The problem is worse in US
English where many words which end <b><i>-re</i></b> in British
English are instead spelled <b><i>-er</i></b> - e.g. <i>center</i>,
<i>fiber</i>, <i>liter</i>, <i>luster</i>.
</p>

<p>
Superlatives are not handled at all due to too many cases where it would
be problematic - for example <i>attest</i>, <i>behest</i>,
<i>request</i>, <i>tempest</i>.  There is not a rule to remove
<b><i>-est</i></b> only in <i>R</i>2 because it would help in very few cases
but be harmful for e.g. <i>deforest</i>, <i>disinterest</i>, <i>interest</i>,
<i>manifest</i>, <i>redigest</i>.  These could be avoided by additional
conditions on the removal, but the added complexity doesn't seem justifiable by
the small number of words removing <i>-est</i> in <i>R</i>2 would improve the
stemming of.
</p>

<p>
Suffix <i>-ian</i> is not removed.  A significant problem with removal is
that sometimes we want to remove the whole three letters (e.g. <i>orwellian</i>,
<i>politician</i>), sometimes <i>-an</i> (e.g. <i>comedian</i>,
<i>historian</i>, <i>italian</i>) and sometimes just <i>-n</i> (e.g.
<i>indian</i>, <i>bolivian</i>, <i>californian</i>).
</p>

<h2>Definition of the English stemmer</h2>

<p>
To begin with, here is the basic algorithm without reference to the
exceptional forms. An exact comparison with the Porter algorithm needs to
be done quite carefully if done at all. Here we indicate by <code><FONT COLOR=BLUE>*</FONT></code> points
of departure, and by <code><FONT COLOR=BLUE>+</FONT></code> additional features. In the sample vocabulary,
Porter and Porter2 stem slightly over 5% of words to different forms.
</p>

<p>
Define a <I>vowel</I> as one of
<DL><DD>
    <B><I>a  &nbsp;  e  &nbsp;  i  &nbsp;  o  &nbsp;  u  &nbsp;  y</I></B>
</DL>
Define a <I>double</I> as one of
<DL><DD>
    <B><I>bb  &nbsp;  dd  &nbsp;  ff  &nbsp;  gg  &nbsp;  mm  &nbsp;  nn  &nbsp;  pp  &nbsp;  rr  &nbsp;  tt</I></B>
</DL>
Define a <I>valid <B><I>li</I></B>-ending</I> as one of
<DL><DD>
    <B><I>c  &nbsp;  d  &nbsp;  e  &nbsp;  g  &nbsp;  h  &nbsp;  k  &nbsp;  m  &nbsp;  n  &nbsp;  r  &nbsp;  t</I></B>
</DL>

<I>R</I>1 is the region after the first non-vowel following a vowel, or the end of
the word if there is no such non-vowel. (This definition may be modified for certain exceptional
words &#x2014; see below.)
</p>

<p>
<I>R</I>2 is the region after the first non-vowel following a vowel in <I>R</I>1, or the
end of the word if there is no such non-vowel.
(See <A HREF="../../texts/r1r2.html"> note</A> on <I>R</I>1 and <I>R</I>2.)
</p>

<p>
Define a <I>short syllable</I> in a word as either (<I>a</I>) a vowel followed by a
non-vowel other than <B><I>w</I></B>, <B><I>x</I></B> or <B><I>Y</I></B> and preceded by a non-vowel, or
<code><FONT COLOR=BLUE>*</FONT></code>
(<I>b</I>) a vowel at the beginning of the word followed by a non-vowel, or
(<i>c</i>) <b><i>past</i></b>.
</p>

<p>
So <I>rap</I>,
<I>trap</I>, <I>entrap</I> end with a short syllable, and <I>ow</I>, <I>on</I>, <I>at</I>, <i>past</i> are
classed as short syllables. But <I>uproot</I>, <I>bestow</I>, <I>disturb</I> do not end with a
short syllable.
</p>

<p>
A word is called <I>short</I> if it ends in a short syllable, and if <I>R</I>1 is null.
</p>

<p>
So <I>bed</I>, <I>shed</I> and <I>shred</I> are short words, <I>bead</I>, <I>embed</I>, <I>beds</I> are
not short words.
</p>

<p>
An apostrophe (<B><I>'</I></B>) may be regarded as a letter.
(See <A HREF="../../texts/apostrophe.html"> note</A> on apostrophes in English.)
</p>

<p>
If the word has two letters or less, leave it as it is.
</p>

<p>
Otherwise, do each of the following operations,
</p>

<p>
Remove initial <B><I>'</I></B>, if present. <code><FONT COLOR=BLUE>+</FONT></code> Then,
</p>

<p>
Set initial <B><I>y</I></B>, or <B><I>y</I></B> after a vowel, to <B><I>Y</I></B>, and then establish the regions
<I>R</I>1 and <I>R</I>2.
(See <A HREF="../../texts/vowelmarking.html"> note</A> on vowel marking.)
</p>

<p>
Step 0: <code><FONT COLOR=BLUE>+</FONT></code>
<DL><DD>
    <p>
    Search for the longest among the suffixes,
    </p>
    <DL>
    <DT><B><I>'</I></B>
    <DT><B><I>'s</I></B>
    <DT><B><I>'s'</I></B>
        <DD>and remove if found.
</DL>
</DL>
Step 1<I>a</I>:
<DL><DD>
    <p>
    Search for the longest among the following suffixes, and perform the
    action indicated.
    </p>
    <DL>
    <DT><B><I>sses</I></B>
        <DD>replace by <B><I>ss</I></B>
    <DT><B><I>ied</I></B><code><FONT COLOR=BLUE>+</FONT></code>  &nbsp;  <B><I>ies</I></B><code><FONT COLOR=BLUE>*</FONT></code>
        <DD>replace by <B><I>i</I></B> if preceded by more than one letter, otherwise by <B><I>ie</I></B>
        (so <I>ties</I> &#x2192; <I>tie</I>, <I>cries</I> &#x2192; <I>cri</I>)
    <DT><B><I>s</I></B>
        <DD>delete if the preceding word part contains a vowel not immediately before the
<B><I>s</I></B> (so <I>gas</I> and <I>this</I> retain the <B><I>s</I></B>, <I>gaps</I> and <I>kiwis</I> lose it)
    <DT><B><I>us</I></B><code><FONT COLOR=BLUE>+</FONT></code>  &nbsp;  <B><I>ss</I></B>
        <DD>do nothing
</DL>
</DL>

Step 1<I>b</I>:
<DL><DD>
    <p>
    Search for the longest among the following suffixes, and perform the
    action indicated.
    </p>
    <DL>
    <DT><B><I>eed  &nbsp;  eedly</I></B><code><FONT COLOR=BLUE>+</FONT></code>
        <DD>replace by <B><I>ee</I></B> if in <I>R</I>1
    <DT><B><I>ed  &nbsp;  edly</I></B><code><FONT COLOR=BLUE>+</FONT></code>  &nbsp;  <B><I>ing  &nbsp;  ingly</I></B><code><FONT COLOR=BLUE>+</FONT></code>
        <DD>for <b><i>ing</i></b>, check if the word before the suffix is exactly one of the following exceptional cases:
	   <ul>
	   <li> if it's a non-vowel followed by <b><i>y</i></b>, replace <b><i>y</i></b> and <b><i>ing</i></b> with <b><i>ie</i></b> (so <i>dying</i> &#x2192; <i>die</i>), then go to step 1<i>c</i>.
	   <li> if it's exactly one of <I>inn</I>, <I>out</I>, <I>cann</I>, <I>herr</I>, <I>earr</I> or <I>even</I> then go to step 1<i>c</i>.
	   </ul>
        <DD>delete if the preceding word part contains a vowel, and after the deletion:
        <DD>if the word ends <B><I>at</I></B>, <B><I>bl</I></B> or <B><I>iz</I></B> add <B><I>e</I></B> (so <I>luxuriat</I> &#x2192; <I>luxuriate</I>), or
        <DD>if the word ends with a <i>double</i> preceded by something other than exactly <b><i>a</i></b>, <b><i>e</i></b> or <b><i>o</i></b> then
        remove the last letter (so <I>hopp</I> &#x2192; <I>hop</I> but <i>add</i>, <i>egg</i> and <i>off</i> are not changed), or
        <DD>if the word does not end with a <i>double</i> and is short, add <B><I>e</I></B> (so <I>hop</I> &#x2192; <I>hope</I>)
</DL>
</DL>

Step 1<I>c</I>: <code><FONT COLOR=BLUE>*</FONT></code>
<DL><DD>
    replace suffix <B><I>y</I></B> or <B><I>Y</I></B> by <B><I>i</I></B> if preceded by a non-vowel which is not the
    first letter of the word (so <I>cry</I> &#x2192; <I>cri</I>, <I>by</I> &#x2192; <I>by</I>, <I>say</I> &#x2192; <I>say</I>)
</DL>

Step 2:
<DL><DD>
    <p>
    Search for the longest among the following suffixes, and, if
    found and in <I>R</I>1, perform the action indicated.
    </p>
    <DL>
    <DT><B><I>tional</I></B>:  &nbsp;  replace by <B><I>tion</I></B>
    <DT><B><I>enci</I></B>:  &nbsp;  replace by <B><I>ence</I></B>
    <DT><B><I>anci</I></B>:  &nbsp;  replace by <B><I>ance</I></B>
    <DT><B><I>abli</I></B>:  &nbsp;  replace by <B><I>able</I></B>
    <DT><B><I>entli</I></B>:  &nbsp;  replace by <B><I>ent</I></B>
    <DT><B><I>izer  &nbsp;  ization</I></B>:  &nbsp;  replace by <B><I>ize</I></B>
    <DT><B><I>ational  &nbsp;  ation  &nbsp;  ator</I></B>:  &nbsp;  replace by <B><I>ate</I></B>
    <DT><B><I>alism  &nbsp;  aliti  &nbsp;  alli</I></B>:  &nbsp;  replace by <B><I>al</I></B>
    <DT><B><I>fulness</I></B>:  &nbsp;  replace by <B><I>ful</I></B>
    <DT><B><I>ousli &nbsp;  ousness</I></B>:  &nbsp;  replace by <B><I>ous</I></B>
    <DT><B><I>iveness &nbsp;  iviti</I></B>:  &nbsp;  replace by <B><I>ive</I></B>
    <DT><B><I>biliti  &nbsp;  bli</I></B><code><FONT COLOR=BLUE>+</FONT></code>:  &nbsp;  replace by <B><I>ble</I></B>
    <DT><B><I>ogist</I></B><code><FONT COLOR=BLUE>+</FONT></code>:  &nbsp;  replace by <B><I>og</I></B>
    <DT><B><I>ogi</I></B><code><FONT COLOR=BLUE>+</FONT></code>:  &nbsp;  replace by <B><I>og</I></B> if preceded by <B><I>l</I></B>
    <DT><B><I>fulli</I></B><code><FONT COLOR=BLUE>+</FONT></code>:  &nbsp;  replace by <B><I>ful</I></B>
    <DT><B><I>lessli</I></B><code><FONT COLOR=BLUE>+</FONT></code>:  &nbsp;  replace by <B><I>less</I></B>
    <DT><B><I>li</I></B><code><FONT COLOR=BLUE>+</FONT></code>:  &nbsp;  delete if preceded by a valid <B><I>li</I></B>-ending
</DL>
</DL>

Step 3:
<DL><DD>
    <p>
    Search for the longest among the following suffixes, and, if
    found and in <I>R</I>1, perform the action indicated.
    </p>
    <DL>
    <DT><B><I>tional</I></B><code><FONT COLOR=BLUE>+</FONT></code>:  &nbsp;  replace by <B><I>tion</I></B>
    <DT><B><I>ational</I></B><code><FONT COLOR=BLUE>+</FONT></code>:  &nbsp;  replace by <B><I>ate</I></B>
    <DT><B><I>alize</I></B>:  &nbsp;  replace by <B><I>al</I></B>
    <DT><B><I>icate  &nbsp;  iciti  &nbsp;  ical</I></B>:  &nbsp;  replace by <B><I>ic</I></B>
    <DT><B><I>ful  &nbsp;  ness</I></B>:  &nbsp;  delete
    <DT><B><I>ative</I></B><code><FONT COLOR=BLUE>*</FONT></code>:  &nbsp;  delete if in <I>R</I>2
</DL>
</DL>

Step 4:
<DL><DD>
    <p>
    Search for the longest among the following suffixes, and, if
    found and in <I>R</I>2, perform the action indicated.
    </p>
    <DL>
    <DT><B><I>al  &nbsp;  ance  &nbsp;  ence  &nbsp;  er  &nbsp;  ic  &nbsp;  able  &nbsp;  ible  &nbsp;  ant  &nbsp;  ement  &nbsp;
            ment  &nbsp;  ent  &nbsp;  ism  &nbsp;  ate  &nbsp;  iti  &nbsp;  ous  &nbsp;  ive  &nbsp;  ize</I></B>
        <DD>delete
    <DT><B><I>ion</I></B>
        <DD>delete if preceded by <B><I>s</I></B> or <B><I>t</I></B>
</DL>
</DL>

Step 5: <code><FONT COLOR=BLUE>*</FONT></code>
<DL><DD>
    <p>
    Search for the following suffixes, and, if
    found, perform the action indicated.
    </p>
    <DL>
    <DT><B><I>e</I></B>
    <DD>delete if in <I>R</I>2, or in <I>R</I>1 and not preceded by a short
    syllable
    <DT><B><I>l</I></B>
    <DD>delete if in <I>R</I>2 and preceded by <B><I>l</I></B>
</DL>
</DL>
<p>
Finally, turn any remaining <B><I>Y</I></B> letters in the word back into lower case.
</p>

<h2>Exceptional forms in general</h2>

<p>
It is quite easy to expand a Snowball script so that certain exceptional
word forms get special treatment. The standard case is that certain words
<code>W<SUB>1</SUB></code>, &nbsp;<code>W<SUB>2</SUB></code>&nbsp; ..., instead of passing through the stemming process, are
mapped to the forms &nbsp;<code>X<SUB>1</SUB></code>, &nbsp;<code>X<SUB>2</SUB></code>&nbsp; ... respectively. If the script does
the stemming by means of the call
</p>
[% highlight("
    define stem as C
") %]
<p>
where &nbsp;<code>C</code>&nbsp; is a command, the exceptional cases can be dealt with by extending this to
</p>
[% highlight("
    define stem as ( exception or C )
") %]
<p>
and putting in a routine &nbsp;<code>exception</code>:
</p>
<PRE>
    define exception as (
        [substring] atlimit among(
            'W<SUB>1</SUB>'  ( &lt;- 'X<SUB>1</SUB>' )
            'W<SUB>2</SUB>'  ( &lt;- 'X<SUB>2</SUB>' )
            ...
        )
    )
</PRE>
<p>
<code>atlimit</code>&nbsp; causes the whole string to be tested for equality with one of
the &nbsp;<code>W<SUB>i</SUB></code>, and if a match is found, the string is replaced with
<code>X<SUB>i</SUB></code>.
</p>

<p>
More precisely we might have a group of words &nbsp;<code>W<SUB>11</SUB></code>, &nbsp;<code>W<SUB>12</SUB></code>&nbsp; ...
that need to be mapped to &nbsp;<code>X<SUB>1</SUB></code>, another group &nbsp;<code>W<SUB>21</SUB></code>, &nbsp;<code>W<SUB>22</SUB></code>
... that need to be mapped to &nbsp;<code>X<SUB>2</SUB></code>, and so on, and a list of words
<code>V<SUB>1</SUB></code>, &nbsp;<code>V<SUB>2</SUB></code>&nbsp; ... &nbsp;<code>V<SUB>k</SUB></code>&nbsp; that are to remain invariant. The
<code>exception</code>&nbsp; routine may then be written as follows:

<BR><PRE>
    among( 'W<SUB>11</SUB>' 'W<SUB>12</SUB>' ... (&lt;- 'X<SUB>1</SUB>')
           'W<SUB>21</SUB>' 'W<SUB>22</SUB>' ... (&lt;- 'X<SUB>2</SUB>')
           ...
           'W<SUB>n1</SUB>' 'W<SUB>n2</SUB>' ... (&lt;- 'X<SUB>n</SUB>')
           'V<SUB>1</SUB>' 'V<SUB>2</SUB>' ... 'V<SUB>k</SUB>'
         )
</PRE>
<p>
And indeed the &nbsp;<code>exception1</code>&nbsp; routine for the English stemmer has just that
shape:
</p>
[% highlight("
    define exception1 as (

        [substring] atlimit among(

            /* special changes: */

            'skis'      (<-'ski')
            'skies'     (<-'sky')

            /* special -LY cases */

            'idly'      (<-'idl')
            'gently'    (<-'gentl')
            'ugly'      (<-'ugli')
            'early'     (<-'earli')
            'only'      (<-'onli')
            'singly'    (<-'singl')

            // ... extensions possible here ...

            /* invariant forms: */

            'sky'
            'news'
            'howe'

            'atlas' 'cosmos' 'bias' 'andes' // not plural forms

            // ... extensions possible here ...
        )
    )
") %]

<p>
(More will be said about the words that appear here shortly.)
</p>

<p>
Here we see words being treated exceptionally before stemming is done, but equally we could
treat stems exceptionally after stemming is done, and so, if we wish, map <I>absorpt</I> to
<I>absorb</I>, <I>reduct</I> to <I>reduc</I> etc., as in the
<A HREF="../lovins/stemmer.html">Lovins stemmer</A>.
But more generally, throughout the algorithm, each significant step may have recognised
exceptions, and a suitably placed &nbsp;<code>among</code>&nbsp; will take care of them. For example, a point made
at least twice in the literature is that words beginning <B><I>gener</I></B> are overstemmed by the
Porter stemmer:
</p>

<DL><DD><TABLE CELLPADDING=0>
    <TR><TD> <I>generate<BR>
         generates<BR>
         generated<BR>
         generating<BR>
         general<BR>
         generally<BR>
         generic<BR>
         generically<BR>
         generous<BR>
         generously</I> <TD></TD><TD>  &nbsp;  &#x2192;  &nbsp;  <TD></TD><TD> <I>gener</I>

</TABLE></DL>

<p>
To fix cases of over-stemming like this which involve multiple words and
suffixes, it's best to add an exception to the definition of the start of
<i>R</i>1, which in the Snowball implementation means adjusting the code which
sets <I>p</I>1, so we replace
</p>

[% highlight("
    gopast v  gopast non-v  setmark p1
") %]

<p>
with
</p>

[% highlight("
    among (
        'gener'
        // ... and other stems may be included here ...
    ) or (gopast v  gopast non-v)
    setmark p
") %]

<p>
after which the words beginning <B><I>gener</I></B> stem as follows:
</p>

<DL><DD><TABLE CELLPADDING=0>
    <TR><TD> <I>generate<BR>
         generates<BR>
         generated<BR>
         generating</I>
                      <TD></TD><TD>  &nbsp;  &#x2192;  &nbsp;  <TD></TD><TD> <I>generat</I>

    <TR><TD> <I>general<BR>
         generally</I>
                      <TD></TD><TD>  &nbsp;  &#x2192;  &nbsp;  <TD></TD><TD> <I>general</I>
    <TR><TD> <I>generic<BR>
         generically</I>
                      <TD></TD><TD>  &nbsp;  &#x2192;  &nbsp;  <TD></TD><TD> <I>generic</I>
    <TR><TD> <I>generous<BR>
         generously</I>
                      <TD></TD><TD>  &nbsp;  &#x2192;  &nbsp;  <TD></TD><TD> <I>generous</I>
</TABLE></DL>

<p>
Exceptions specific to a single suffix are typically better handled where that
suffix is handled rather than with a global exception, since the overhead of
checking a global exception is incurred by all words.
</p>

<p>
For example, we want to make exceptions to <b><i>-ing</i></b> handling for
e.g. <i>dying</i> &#x2192; <i>die</i> (done for any word consisting of
a consonant plus <i>ying</i>), and to leave words such as <i>herring</i>
alone (rather than stemming to <i>her</i>):
</p>

[% highlight("
                among (
                    // dying->die, lying->die, tying->tie, vying->vie
                    'y'
                        (test(non-v atlimit) ] <-'ie')
                    // Leave inning, outing, etc alone.
                    'inn' 'out' 'cann' 'herr' 'earr' 'even'
                        (atlimit)
                )
") %]

<p>
This happens in step 1<i>b</i>, so step 1<i>a</i> may have removed terminal <b><i>s</i></b>,
so we also stem <i>dyings</i> &#x2192; <i>die</i>, <i>herrings</i> &#x2192; <i>herring</i>, etc.
</p>

<p>
Snowball makes it easy therefore to add in lists of exceptions. But deciding what the lists of
exceptions should be is far from easy. Essentially there are two lines of attack, the
systematic and the piecemeal. One might systematically treat as exceptions the stem changes of
irregular verbs, for example. The piecemeal approach is to add in exceptions as people notice
them &#x2014; like <B><I>gener</I></B> above. The problem with the systematic approach is that it should be
done by investigating the entire language vocabulary, and that is more than most people are
prepared to do. The problem with the piecemeal approach is that it is arbitrary, and usually
yields little.
</p>

<p>
The exception lists in the English stemmer are meant to be illustrative (&#8216;this is how it is done if you
want to do it&#8217;), and were derived piecemeal.
</p>

<p>
<I>a</I>)
The new stemmer improves on the Porter stemmer in handling short words ending <B><I>e</I></B> and
<B><I>y</I></B>. There is however a mishandling of the four forms <I>sky</I>, <I>skies</I>, <I>ski</I>,
<I>skis</I>, which is easily corrected by treating three of these words as
special cases.
</p>

<p>
<I>b</I>)
Similarly there is a problem with the <B><I>ing</I></B> form of three letter verbs ending <B><I>ie</I></B>. There
are five such verbs: <I>die</I>, <i>hie</i>, <I>lie</I>, <I>tie</I> and <i>vie</i>, which are handled by a
special case when <i>-ing</i> is preceded by exactly a non-vowel and <i>y</i>.
</p>

<p>
<I>c</I>)
One has to be a little careful of certain <B><I>ing</I></B> forms.
<I>inning</I>, <I>outing</I>, <I>canning</I>, <I>herring</I>, <I>earring</I>, <I>evening</I>, which one does not wish
to be stemmed to
<I>in</I>, <I>out</I>, <I>can</I>, <I>her</I>, <I>ear</I>, <I>even</I>.
</p>

<p>
<I>d</I>)
The removal of suffix <B><I>ly</I></B>, which is not in the Porter stemmer, has a number of exceptions.
Certain short-word exceptions are <I>idly</I>, <I>gently</I>, <I>ugly</I>, <I>early</I>, <I>only</I>, <I>singly</I>.
Rarer words (<I>bristly</I>, <I>burly</I>, <I>curly</I>, <I>surly</I> ...) are not included.
</p>

<p>
<I>e</I>)
The remaining words were included following complaints from users of the Porter algorithm.
<I>news</I> is not the plural of <I>new</I> (noticed when IR systems were being set up for
Reuters). <I>Howe</I> is a surname, and needs to be separated from <I>how</I> (noticed when
doing a search for &#8216;Sir Geoffrey Howe&#8217; in a demonstration at the House of Commons).
<I>succeed</I> etc are not past participles, so the <B><I>ed</I></B> should not be removed (pointed out
to me in an email from India). <I>herring</I> should not stem to <I>her</I> (another email from
Russia).
</p>

<p>
<I>f</I>)
Finally, a few non-plural words ending <B><I>s</I></B> have been added.
</p>

<p>
Incidentally, this illustrates how much feedback to expect from the real users of a stemming
algorithm: seven or eight words in twenty years!
</p>

<p>
The definition of the English stemmer above is therefore supplemented by the following:
</p>

<h2>Exceptional forms in the English stemmer</h2>

<DL><DD>
    <p>
    If the word begins
    <B><I>gener</I></B>,
    <B><I>commun</I></B>,
    <B><I>arsen</I></B>,
    <b><i>past</i></b> or
    <b><i>univers</i></b>,
    <b><i>later</i></b>,
    set <I>R</I>1 to be the remainder of the word.
    </p>

    <p>
    Stem certain special words as follows,
    </p>

<DL><DD><TABLE CELLPADDING=0>
<TR><TD> <I>skis</I>      <TD></TD><TD>   &nbsp;  &#x2192;  &nbsp;  <TD></TD><TD> <I>ski</I>
<TR><TD> <I>skies</I>     <TD></TD><TD>   &nbsp;  &#x2192;  &nbsp;  <TD></TD><TD> <I>sky</I>

<TR><TD> <I>idly <BR> gently <BR> ugly <BR> early <BR> only <BR> singly</I>
                 <TD></TD><TD>  &#x2192;
                               <TD></TD><TD> <I>idl <BR> gentl <BR> ugli <BR> earli <BR> onli <BR> singl</I>

</TABLE></DL>

<p>
    If one of the following is found, leave it invariant,
</p>

<DL><DD><TABLE CELLPADDING=0>
<TR><TD>        <I>sky <BR> news <BR> howe</I>
<TR><TD>        <I>atlas</I>  &nbsp; <TD></TD><TD> &nbsp;  <I>cosmos</I>  &nbsp; <TD></TD><TD> &nbsp;  <I>bias</I>  &nbsp; <TD></TD><TD> &nbsp;  <I>andes</I>
</TABLE></DL>

<h2>The full algorithm in Snowball</h2>

[% highlight_file('english') %]

[% footer %]
